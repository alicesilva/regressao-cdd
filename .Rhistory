geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.2, intercept = 0.5, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = 0.4, intercept = 0.5, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = 0.4, intercept = 0.4, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.4, intercept = 0.4, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = 0.4, intercept = 0.4, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.4, intercept = 0.4, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.1, intercept = 0.4, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.1, intercept = 80, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.5, intercept = 80, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.5, intercept = 50, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.5, intercept = 60, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.5, intercept = 56, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.6, intercept = 65, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.6, intercept = 70, color  = "red")
ggplot(countyComplete, aes(x = hs_grad, y = poverty)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.6, intercept = 65, color  = "red")
library(openintro)
library(tidyverse)
library(ggbeeswarm)
library(modelr)
library(broom)
theme_set(theme_bw())
dados = read_tsv("marioKart.txt")
dados = read_tsv("data/marioKart.txt")
dados = read_tsv(here::here("data/marioKart.txt"))
dados = read_tsv(here::here("data/marioKart.txt"))
glimpse(dados)
dados = read_tsv(here::here("data/marioKart.txt"))
glimpse(dados)
ggplot(aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4, size = .5)
dados = read_tsv(here::here("data/marioKart.txt"))
glimpse(dados)
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4, size = .5)
dados = read_tsv(here::here("data/marioKart.txt"))
glimpse(dados)
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4, size = .8)
library(openintro)
library(tidyverse)
library(ggbeeswarm)
library(modelr)
library(broom)
theme_set(theme_bw())
dados = read_tsv(here::here("data/marioKart.txt"))
glimpse(dados)
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4, size = .1)
dados = read_tsv(here::here("data/marioKart.txt"))
glimpse(dados)
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point()
dados = read_tsv(here::here("data/marioKart.txt"))
glimpse(dados)
ggplot(dados, aes(x = totalPr, y = nBids)) +
geom_point()
dados = read_tsv(here::here("data/marioKart.txt"))
glimpse(dados)
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point()
ggplot(countyComplete, aes(x = nBida, y = totalPr)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.6, intercept = 65, color  = "red")
ggplot(countyComplete, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.6, intercept = 65, color  = "red")
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4, size = .8) +
geom_abline(slope = -0.6, intercept = 65, color  = "red")
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point() +
geom_abline(slope = -0.6, intercept = 65, color  = "red")
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE)
dados = read_tsv(here::here("data/marioKart.txt"))
glimpse(dados)
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4)
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = -0.6, intercept = 65, color  = "red")
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE)
mod <- lm(totalPr ~ nBids,
data = countyComplete)
mod <- lm(totalPr ~ nBids,
data = dados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
countyComplete %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4, size = .1) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
mod <- lm(totalPr ~ nBids,
data = dados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dados %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4, size = .1) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
mod <- lm(totalPr ~ nBids,
data = dados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dados %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
dados = read_tsv(here::here("data/marioKart.txt"))
dados <- dados %>%
reorder(nBids)
dados = read_tsv(here::here("data/marioKart.txt"))
glimpse(dados)
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4)
View(dados)
dadosFiltrados = dados %>%
filter(totalPr > 100)
glimpse(dadosFiltrados)
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4)
dadosFiltrados = dados %>%
filter(totalPr < 60)
glimpse(dadosFiltrados)
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4)
dadosFiltrados = dados %>%
filter(totalPr < 60)
glimpse(dadosFiltrados)
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4)
dadosFiltrados = dados %>%
filter(totalPr < 60)
glimpse(dadosFiltrados)
ggplot(dadosFiltrados, aes(x = totalPr, y = nBids)) +
geom_point(alpha = 0.4)
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = -0.6, intercept = 65, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE)
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 10, intercept = 65, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.5, intercept = 65, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.5, intercept = 50, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.5, intercept = 75, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.5, intercept = 63, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.5, intercept = 65, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.5, intercept = 65, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = -0.5, intercept = 65, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.5, intercept = 60, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.5, intercept = 50, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.5, intercept = 55, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.6, intercept = 55, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.8, intercept = 55, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.8, intercept = 70, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.8, intercept = 75, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.8, intercept = 65, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.8, intercept = 60, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.8, intercept = 40, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = 0.8, intercept = 30, color  = "red")
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_abline(slope = -0.12, intercept = 49.1, color  = "red")
mod <- lm(totalPr ~ nBids,
data = dadosFiltrados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dadosFiltrados %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
mod <- lm(nBids ~ totalPr,
data = dadosFiltrados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dadosFiltrados %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
mod <- lm(totalPr ~ nBids,
data = dadosFiltrados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dadosFiltrados %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
mod <- lm(totalPr ~ nBids,
data = dadosFiltrados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dadosFiltrados %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = totalPr, y = nBids)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
mod <- lm(totalPr ~ nBids,
data = dadosFiltrados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dadosFiltrados %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
dadosFiltrados %>%
add_residuals(model = mod) %>%
ggplot(aes(hs_grad, resid)) +
geom_point(alpha = .4, size = .5) +
geom_hline(yintercept = 0, colour = "blue")
dadosFiltrados %>%
add_residuals(model = mod) %>%
ggplot(aes(nBids, totalPr)) +
geom_point(alpha = .4, size = .5) +
geom_hline(yintercept = 0, colour = "blue")
dadosFiltrados %>%
add_residuals(model = mod) %>%
ggplot(aes(nBids, resid)) +
geom_point(alpha = .4, size = .5) +
geom_hline(yintercept = 0, colour = "blue")
# vari칙ncia de y
var.y2 <- sum((dadosFiltrados$totalPr - mean(countyComplete$to))^2)
# vari칙ncia de y
var.y2 <- sum((dadosFiltrados$totalPr - mean(dadosFiltrados$totalPr))^2)
# vari칙ncia dos res칤duos do modelo
var.residuals <- sum(mod$residuals^2)
#calculando e conferindo o R^2
(var.y2 - var.residuals)/var.y2
rsquare(mod, data = dadosFiltrados)
glance(mod)
rmse(mod, countyComplete)
rmse(mod, dadosFiltrados)
mae(mod, dadosFiltrados)
qae(mod, dadosFiltrados)
mod <- lm(totalPr ~ nBids,
data = dadosFiltrados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dadosFiltrados %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
dadosMutate = dados %>%
mutate(aumento = totalPr - startPr)
glimpse(dadosMutate)
ggplot(dadosMutate, aes(x = nBids, y = aumento)) +
geom_point(alpha = 0.4)
View(dadosMutate)
dados = read_tsv(here::here("data/marioKart.txt"))
glimpse(dados)
ggplot(dados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4)
dadosFiltrados = dados %>%
filter(totalPr < 60)
glimpse(dadosFiltrados)
ggplot(dadosFiltrados, aes(x = nBinds, y = totalPr)) +
geom_point(alpha = 0.4)
dadosFiltrados = dados %>%
filter(totalPr < 60)
glimpse(dadosFiltrados)
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4)
ggplot(dadosFiltrados, aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE)
mod <- lm(totalPr ~ nBids,
data = dadosFiltrados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dadosFiltrados %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
dadosFiltrados %>%
add_residuals(model = mod) %>%
ggplot(aes(nBids, resid)) +
geom_point(alpha = .4, size = .5) +
geom_hline(yintercept = 0, colour = "blue")
library(openintro)
library(tidyverse)
library(ggbeeswarm)
library(modelr)
library(broom)
theme_set(theme_bw())
mod <- lm(aumento ~ nBids,
data = dadosMutate)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dadosMutate %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = aumento)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
mod <- lm(aumento ~ nBids,
data = dadosMutate)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
tidy(mod, conf.int = TRUE, conf.level = .95)
dadosMutate %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = aumento)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
ggplot(dadosMutate, aes(x = nBids, y = aumento)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE)
dadosMutate = dados %>%
filter(totalPr < 60) %>%
mutate(aumento = totalPr - startPr)
glimpse(dadosMutate)
ggplot(dadosMutate, aes(x = nBids, y = aumento)) +
geom_point(alpha = 0.4)
ggplot(dadosMutate, aes(x = nBids, y = aumento)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE)
mod <- lm(aumento ~ nBids,
data = dadosMutate)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
tidy(mod, conf.int = TRUE, conf.level = .95)
dadosMutate %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = nBids, y = aumento)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
View(dadosFiltrados)
dadosFiltrados = dados %>%
filter(totalPr < 60)
glimpse(dadosFiltrados)
ggplot(dadosFiltrados, aes(x = stockPhoto, y = totalPr)) +
geom_point(alpha = 0.4)
View(dadosFiltrados)
dadosFiltrados = dados %>%
filter(totalPr < 60)
glimpse(dadosFiltrados)
ggplot(dadosFiltrados, aes(x = stockPhoto, y = totalPr)) +
geom_point(alpha = 0.4)
mod <- lm(stockPhoto ~ nBids,
data = dadosFiltrados)
mod <- lm(totalPr ~ stockPhoto,
data = dadosFiltrados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dadosFiltrados %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = stockPhoto, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
mod <- lm(totalPr ~ stockPhoto,
data = dadosFiltrados)
# sintaxe base R:
summary(mod)
confint(mod)
# broom, que acho mais recomend치vel:
tidy(mod)
glance(mod) # depois falaremos desse
dadosFiltrados %>%
add_predictions(model = mod) %>% # add o que o modelo estima p cada hs_grad
ggplot(mapping = aes(x = stockPhoto, y = totalPr)) +
geom_point(alpha = 0.4) +
geom_line(aes(y = pred), colour = "red")  +
geom_abline(intercept = 75, slope = -.72, color  = "darkblue")
tidy(mod, conf.int = TRUE, conf.level = .95)
